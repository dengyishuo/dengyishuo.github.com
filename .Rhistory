# 提取并格式化结果
historical_var <- abs(var_result[1,])  # VaR值通常取正数表示损失
confidence_level <- attr(var_result, "cl")
# 输出结果
cat("PerformanceAnalytics计算的每日VaR（", confidence_level*100, "%置信水平）:",
round(historical_var*100, 2), "%\n")
# 可视化收益率分布及VaR
hist(returns, breaks = 50, main = "日收益率分布与VaR（历史模拟法）",
xlab = "日收益率", col = "lightblue", border = "white")
abline(v = -historical_var, col = "red", lwd = 2)
text(x = -historical_var, y = par("usr")[4]*0.9,
labels = paste("VaR =", round(historical_var*100, 2), "%"),
pos = 2, col = "red")
# 加载必要包
library(quantmod)  # 金融数据获取
library(dplyr)     # 数据处理
library(ggplot2)   # 可视化
# ========== 参数设置 ==========
symbols <- c("AAPL", "GOOG", "MSFT")  # 资产代码（苹果、谷歌、微软）
weights <- c(0.5, 0.3, 0.2)          # 资产权重（总和为1）
portfolio_value <- 1e7               # 投资组合当前价值（假设1千万元）
confidence_level <- 0.95             # 置信水平
start_date <- "2020-01-01"           # 数据开始日期
end_date <- "2023-12-31"             # 数据结束日期
# ========== 1. 获取历史价格数据 ==========
getSymbols(symbols, src = "yahoo", from = start_date, to = end_date)
# 提取收盘价并合并
prices <- merge(Cl(get(symbols[1])), Cl(get(symbols[2])), Cl(get(symbols[3])))
colnames(prices) <- symbols
# 清理缺失值（确保日期对齐）
prices_clean <- na.omit(prices)
# ========== 2. 计算各资产对数收益率 ==========
returns <- data.frame(
AAPL = as.numeric(Delt(prices_clean$AAPL)),
GOOG = as.numeric(Delt(prices_clean$GOOG)),
MSFT = as.numeric(Delt(prices_clean$MSFT))
) %>% na.omit()  # 去除首行NA
# ========== 3. 计算投资组合每日收益率 ==========
# 将收益率转换为矩阵进行加权计算
returns_matrix <- as.matrix(returns)
portfolio_returns <- returns_matrix %*% weights
# ========== 4. 历史模拟法计算VaR ==========
# 按升序排列组合收益率（损失为负值）
sorted_returns <- sort(portfolio_returns)
# 确定分位数位置
n <- length(sorted_returns)
var_index <- floor((1 - confidence_level) * n)
var_quantile <- sorted_returns[var_index]
# 计算VaR绝对值
VaR <- abs(var_quantile) * portfolio_value
# ========== 5. 输出结果 ==========
cat("========== 计算结果 ==========\n")
cat("置信水平:", confidence_level * 100, "%\n")
cat("历史数据天数:", n, "\n")
cat("VaR分位数对应收益率:", round(var_quantile * 100, 2), "%\n")
cat("组合VaR值:", round(VaR, 2), "元\n")
# ========== 6. 可视化== ==========
# 绘制组合收益率分布直方图
ggplot(data.frame(Return = portfolio_returns), aes(x = Return)) +
geom_histogram(bins = 50, fill = "lightblue", color = "black") +
geom_vline(xintercept = var_quantile, color = "red", linewidth = 1) +
labs(title = "投资组合历史收益率分布与VaR",
x = "收益率", y = "频数") +
annotate("text", x = var_quantile, y = Inf,
label = paste0(confidence_level * 100, "% VaR: ", round(VaR, 2), "元"),
color = "red", vjust = 1.5, hjust = -0.1) +
theme_minimal()
library(quantmod)
library(PerformanceAnalytics)
# 获取AAPL数据
getSymbols("AAPL")
aapl_returns <- ROC(Cl(AAPL), type = "discrete")[-1]
# 设置置信水平
confidence_level <- 0.95
# 使用PerformanceAnalytics包中的VaR函数计算VaR
var_result <- VaR(aapl_returns, p = confidence_level, method = "historical")
cat("使用PerformanceAnalytics包（历史模拟法）计算的VaR（", confidence_level * 100, "%置信水平）:", var_result, "\n")
library(quantmod)
library(fPortfolio)
# 获取AAPL数据
getSymbols("AAPL")
aapl_returns <- ROC(Cl(AAPL), type = "discrete")[-1]
# 设置置信水平
confidence_level <- 0.95
# 创建收益率的时间序列对象（fPortfolio包需要的格式）
aapl_ts <- xts(aapl_returns, order.by = index(aapl_returns))
# 使用fPortfolio包计算VaR
var_fPortfolio <- PortfolioAnalytics::var(aapl_ts, method = "historical", p = confidence_level)
cat("使用fPortfolio包（历史模拟法）计算的VaR（", confidence_level * 100, "%置信水平）:", var_fPortfolio, "\n")
# 使用fPortfolio包计算VaR
var_fPortfolio <- fPortfolio::var(aapl_ts, method = "historical", p = confidence_level)
cat("使用fPortfolio包（历史模拟法）计算的VaR（", confidence_level * 100, "%置信水平）:", var_fPortfolio, "\n")
?var
??var
?fPortfolio
# 使用fPortfolio包计算VaR
var_fPortfolio <- varRisk(aapl_ts, method = "historical", p = confidence_level)
cat("使用fPortfolio包（历史模拟法）计算的VaR（", confidence_level * 100, "%置信水平）:", var_fPortfolio, "\n")
var_fPortfolio <- varRisk(aapl_ts)
var_fPortfolio <- varRisk(aapl_ts,weights=1)
cat("使用fPortfolio包（历史模拟法）计算的VaR（", confidence_level * 100, "%置信水平）:", var_fPortfolio, "\n")
library(quantmod)
library(fPortfolio)
# 获取AAPL数据
getSymbols("AAPL")
aapl_returns <- ROC(Cl(AAPL), type = "discrete")[-1]
# 设置置信水平
confidence_level <- 0.95
# 创建收益率的时间序列对象（fPortfolio包需要的格式）
aapl_ts <- xts(aapl_returns, order.by = index(aapl_returns))
# 使用fPortfolio包计算VaR
var_fPortfolio <- varRisk(aapl_ts,weights=1)
cat("使用fPortfolio包（历史模拟法）计算的VaR（", confidence_level * 100, "%置信水平）:", var_fPortfolio, "\n")
blogdown:::new_post_addin()
# 安装并加载包
if (!require("quantmod")) install.packages("quantmod")
if (!require("mixtools")) install.packages("mixtools")
if (!require("ggplot2")) install.packages("ggplot2")
library(quantmod)
library(mixtools)
library(ggplot2)
# 获取数据（近5年）
getSymbols("^CSI300", from = "2018-01-01", to = "2023-01-01")
# 获取数据（近5年）
getSymbols("^CSI300", from = "2018-01-01", to = "2023-01-01")
# 获取数据（近5年）
getSymbols("^SSEC", from = "2018-01-01", to = "2023-01-01")
# 获取数据（近5年）
getSymbols("^SSEC", from = "2023-01-01", to = "2025-01-01")
# 获取数据（近5年）
getSymbols("^SSEC", from = "2023-01-01", to = "2025-01-01")
# 获取数据（近5年）
getSymbols("TSLA", from = "2023-01-01", to = "2025-01-01")
csi300 <- na.omit(CSI300$CSI300.Close)  # 提取收盘价并去除缺失值
# 计算对数收益率
returns <- diff(log(csi300))
returns <- na.omit(returns)  # 去除NA值
colnames(returns) <- "收益率"
# 获取数据（近5年）
getSymbols("TSLA", from = "2023-01-01", to = "2025-01-01")
tsla <- na.omit(TSLA)  # 提取收盘价并去除缺失值
# 计算对数收益率
returns <- diff(log(tsla))
returns <- na.omit(returns)  # 去除NA值
colnames(returns) <- "收益率"
# 获取数据（近5年）
getSymbols("TSLA", from = "2023-01-01", to = "2025-01-01")
tsla <- na.omit(Cl(TSLA))  # 提取收盘价并去除缺失值
# 计算对数收益率
returns <- diff(log(tsla))
returns <- na.omit(returns)  # 去除NA值
colnames(returns) <- "收益率"
# 拟合混合正态模型（2个成分）
set.seed(123)  # 设置随机种子，保证结果可复现
mix_model <- normalmixEM(returns, k = 2, maxit = 1000)
# 输出参数估计结果
cat("混合正态模型参数估计：\n")
cat(paste("权重 α =", round(mix_model$lambda[1], 4), "\n"))
cat(paste("成分1：均值 μ1 =", round(mix_model$mu[1], 6),
"，标准差 σ1 =", round(mix_model$sigma[1], 6), "\n"))
cat(paste("成分2：均值 μ2 =", round(mix_model$mu[2], 6),
"，标准差 σ2 =", round(mix_model$sigma[2], 6), "\n"))
# 混合正态分布的累积分布函数（CDF）
mix_normal_cdf <- function(x, alpha, mu1, sigma1, mu2, sigma2) {
alpha * pnorm(x, mean = mu1, sd = sigma1) +
(1 - alpha) * pnorm(x, mean = mu2, sd = sigma2)
}
# 用二分法求解VaR
var_mixture_normal <- function(conf_level, alpha, mu1, sigma1, mu2, sigma2, data) {
beta <- 1 - conf_level  # 尾概率
# 确定搜索区间（基于数据的极值）
lower <- min(data) * 2
upper <- 0  # VaR为损失，对应收益率分布的左侧尾部
# 二分法迭代求解
for (i in 1:1000) {
mid <- (lower + upper) / 2
cdf_val <- mix_normal_cdf(mid, alpha, mu1, sigma1, mu2, sigma2)
if (cdf_val < beta) {
lower <- mid
} else {
upper <- mid
}
if (abs(cdf_val - beta) < 1e-6) break  # 精度满足时停止
}
return(-upper)  # 返回VaR（损失值为正）
}
# 计算95%和99%置信水平下的VaR
conf_levels <- c(0.95, 0.99)
var_results <- sapply(conf_levels, function(cl) {
var_mixture_normal(conf_level = cl,
alpha = mix_model$lambda[1],
mu1 = mix_model$mu[1],
sigma1 = mix_model$sigma[1],
mu2 = mix_model$mu[2],
sigma2 = mix_model$sigma[2],
data = returns)
})
# 输出VaR结果
cat("\n混合正态模型VaR计算结果：\n")
for (i in 1:length(conf_levels)) {
cat(paste(conf_levels[i] * 100, "%置信水平下的VaR =",
round(var_results[i], 6), "\n"))
}
# 与传统正态分布假设下的VaR对比
var_normal_95 <- quantile(returns, probs = 0.05)  # 正态假设下95% VaR
var_normal_99 <- quantile(returns, probs = 0.01)  # 正态假设下99% VaR
cat("\n传统正态分布假设下的VaR：\n")
cat(paste("95%置信水平下的VaR =", round(-as.numeric(var_normal_95), 6), "\n"))
cat(paste("99%置信水平下的VaR =", round(-as.numeric(var_normal_99), 6), "\n"))
6. 可视化结果r# 绘制收益率分布直方图及混合正态模型拟合曲线
p <- ggplot(data = as.data.frame(returns), aes(x = 收益率)) +
geom_histogram(aes(y = ..density..), bins = 50, fill = "lightblue", color = "black", alpha = 0.7) +
stat_function(fun = function(x) {  # 混合正态模型密度曲线
mix_model$lambda[1] * dnorm(x, mean = mix_model$mu[1], sd = mix_model$sigma[1]) +
mix_model$lambda[2] * dnorm(x, mean = mix_model$mu[2], sd = mix_model$sigma[2])
}, color = "red", size = 1) +
geom_vline(xintercept = -var_results[1], color = "blue", linetype = "dashed",
size = 1, label = "95% VaR") +
geom_vline(xintercept = -var_results[2], color = "purple", linetype = "dashed",
size = 1, label = "99% VaR") +
labs(title = "沪深300指数收益率分布与混合正态模型拟合",
x = "对数收益率", y = "密度") +
theme_minimal()
print(p)
# 计算95%和99%置信水平下的VaR
conf_levels <- c(0.95, 0.99)
var_results <- sapply(conf_levels, function(cl) {
var_mixture_normal(conf_level = cl,
alpha = mix_model$lambda[1],
mu1 = mix_model$mu[1],
sigma1 = mix_model$sigma[1],
mu2 = mix_model$mu[2],
sigma2 = mix_model$sigma[2],
data = returns)
})
# 输出VaR结果
cat("\n混合正态模型VaR计算结果：\n")
for (i in 1:length(conf_levels)) {
cat(paste(conf_levels[i] * 100, "%置信水平下的VaR =",
round(var_results[i], 6), "\n"))
}
# 与传统正态分布假设下的VaR对比
var_normal_95 <- quantile(returns, probs = 0.05)  # 正态假设下95% VaR
var_normal_99 <- quantile(returns, probs = 0.01)  # 正态假设下99% VaR
cat("\n传统正态分布假设下的VaR：\n")
cat(paste("95%置信水平下的VaR =", round(-as.numeric(var_normal_95), 6), "\n"))
cat(paste("99%置信水平下的VaR =", round(-as.numeric(var_normal_99), 6), "\n"))
6. 可视化结果r# 绘制收益率分布直方图及混合正态模型拟合曲线
p <- ggplot(data = as.data.frame(returns), aes(x = 收益率)) +
geom_histogram(aes(y = ..density..), bins = 50, fill = "lightblue", color = "black", alpha = 0.7) +
stat_function(fun = function(x) {  # 混合正态模型密度曲线
mix_model$lambda[1] * dnorm(x, mean = mix_model$mu[1], sd = mix_model$sigma[1]) +
mix_model$lambda[2] * dnorm(x, mean = mix_model$mu[2], sd = mix_model$sigma[2])
}, color = "red", size = 1) +
geom_vline(xintercept = -var_results[1], color = "blue", linetype = "dashed",
linewidth = 1, label = "95% VaR") +
geom_vline(xintercept = -var_results[2], color = "purple", linetype = "dashed",
linewidth = 1, label = "99% VaR") +
labs(title = "沪深300指数收益率分布与混合正态模型拟合",
x = "对数收益率", y = "密度") +
theme_minimal()
print(p)
?geom_vline
# 计算95%和99%置信水平下的VaR
conf_levels <- c(0.95, 0.99)
var_results <- sapply(conf_levels, function(cl) {
var_mixture_normal(conf_level = cl,
alpha = mix_model$lambda[1],
mu1 = mix_model$mu[1],
sigma1 = mix_model$sigma[1],
mu2 = mix_model$mu[2],
sigma2 = mix_model$sigma[2],
data = returns)
})
# 输出VaR结果
cat("\n混合正态模型VaR计算结果：\n")
for (i in 1:length(conf_levels)) {
cat(paste(conf_levels[i] * 100, "%置信水平下的VaR =",
round(var_results[i], 6), "\n"))
}
# 与传统正态分布假设下的VaR对比
var_normal_95 <- quantile(returns, probs = 0.05)  # 正态假设下95% VaR
var_normal_99 <- quantile(returns, probs = 0.01)  # 正态假设下99% VaR
cat("\n传统正态分布假设下的VaR：\n")
cat(paste("95%置信水平下的VaR =", round(-as.numeric(var_normal_95), 6), "\n"))
cat(paste("99%置信水平下的VaR =", round(-as.numeric(var_normal_99), 6), "\n"))
6. 可视化结果r# 绘制收益率分布直方图及混合正态模型拟合曲线
p <- ggplot(data = as.data.frame(returns), aes(x = 收益率)) +
geom_histogram(aes(y = ..density..), bins = 50, fill = "lightblue", color = "black", alpha = 0.7) +
stat_function(fun = function(x) {  # 混合正态模型密度曲线
mix_model$lambda[1] * dnorm(x, mean = mix_model$mu[1], sd = mix_model$sigma[1]) +
mix_model$lambda[2] * dnorm(x, mean = mix_model$mu[2], sd = mix_model$sigma[2])
}, color = "red", size = 1) +
geom_vline(xintercept = -var_results[1], color = "blue", linetype = "dashed",
linewidth = 1) +
geom_vline(xintercept = -var_results[2], color = "purple", linetype = "dashed",
linewidth = 1) +
labs(title = "沪深300指数收益率分布与混合正态模型拟合",
x = "对数收益率", y = "密度") +
theme_minimal()
print(p)
# 绘制收益率分布直方图及混合正态模型拟合曲线
p <- ggplot(data = as.data.frame(returns), aes(x = 收益率)) +
geom_histogram(aes(y = ..density..),
bins = 50,
fill = "lightblue",
color = "black",
alpha = 0.7) +
stat_function(fun = function(x) {  # 混合正态模型密度曲线
mix_model$lambda[1] * dnorm(x,
mean = mix_model$mu[1],
sd = mix_model$sigma[1]) +
mix_model$lambda[2] * dnorm(x,
mean = mix_model$mu[2],
sd = mix_model$sigma[2])
}, color = "red", size = 1) +
geom_vline(xintercept = -var_results[1],
color = "blue",
linetype = "dashed",
linewidth = 1) +
geom_vline(xintercept = -var_results[2],
color = "purple",
linetype = "dashed",
linewidth = 1) +
labs(title = "沪深300指数收益率分布与混合正态模型拟合",
x = "对数收益率", y = "密度") +
theme_minimal()
print(p)
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::new_post_addin()
# 安装并加载包
if (!require("quantmod")) install.packages("quantmod")
if (!require("rgarch")) install.packages("rgarch")
if (!require("ggplot2")) install.packages("ggplot2")
library(quantmod)
library(rgarch)
install.packages("rgarch", repos="http://R-Forge.R-project.org")
blogdown:::serve_site()
blogdown:::stop_server()
# 安装并加载包
if (!require("quantmod")) install.packages("quantmod")
if (!require("fExtremes")) install.packages("fExtremes")
if (!require("evd")) install.packages("evd")
library(quantmod)
library(fExtremes)
library(evd)
library(ggplot2)
# 获取TSLA数据（2018-2023年）
getSymbols("TSLA", from = "2018-01-01", to = "2023-12-31")
tsla_close <- TSLA$TSLA.Close
ret <- diff(log(tsla_close))  # 对数收益率
loss <- -ret  # 损失序列（负收益为损失）
loss <- na.omit(loss)
colnames(loss) <- "TSLA_Loss"
# 安装并加载包
if (!require("quantmod")) install.packages("quantmod")
if (!require("fExtremes")) install.packages("fExtremes")
if (!require("evd")) install.packages("evd")
library(quantmod)
library(fExtremes)
library(evd)
library(ggplot2)
# 获取TSLA数据（2018-2023年）
getSymbols("TSLA", from = "2018-01-01", to = "2023-12-31")
tsla_close <- TSLA$TSLA.Close
ret <- diff(log(tsla_close))  # 对数收益率
loss <- -ret  # 损失序列（负收益为损失）
loss <- na.omit(loss)
colnames(loss) <- "TSLA_Loss"
# 计算平均超出量
u_candidate <- seq(quantile(loss, 0.7), quantile(loss, 0.95), length.out = 20)  # 候选阈值
mean_excess <- sapply(u_candidate, function(u) {
excess <- loss\[loss > u] - u  # 超出量
mean(excess, na.rm = TRUE)
})
# 可视化平均超出量
me_df <- data.frame(u = u_candidate, mean\_excess = mean\_excess)
ggplot(me\_df, aes(x = u, y = mean\_excess)) +
geom_line(color = "blue") +
geom_point() +
labs(title = "平均超出量函数（确定阈值u）", x = "阈值u", y = "平均超出量") +
theme_minimal()
# 计算平均超出量
u_candidate <- seq(quantile(loss, 0.7), quantile(loss, 0.95), length.out = 20)  # 候选阈值
mean_excess <- sapply(u_candidate, function(u) {
excess <- loss[loss > u] - u  # 超出量
mean(excess, na.rm = TRUE)
})
# 可视化平均超出量
me_df <- data.frame(u = u_candidate, mean_excess = mean_excess)
ggplot(me_df, aes(x = u, y = mean_excess)) +
geom_line(color = "blue") +
geom_point() +
labs(title = "平均超出量函数（确定阈值u）", x = "阈值u", y = "平均超出量") +
theme_minimal()
# 选择阈值（如u=0.03，对应约80%分位数）
u <- 0.03
excess <- as.numeric(loss[loss > u] - u)  # 超出量序列
# 拟合GPD模型
gpd_fit <- fpot(as.numeric(loss), threshold = u)
summary(gpd_fit)  # 输出参数估计结果
# 提取参数
xi <- gpd_fit$estimate["shape"]  # 形状参数ξ
sigma <- gpd_fit$estimate["scale"]  # 尺度参数σ
N <- length(loss)  # 总样本量
Nu <- length(excess)  # 超限值数量
# 可视化极端损失与VaR
extreme_df <- data.frame(
Date = index(loss)\[loss > u],
Extreme_Loss = as.numeric(extreme_loss)
)
ggplot(extreme_df, aes(x = Date, y = Extreme_Loss)) +
geom_point(color = "red") +
geom_hline(yintercept = var_99,
color = "blue",
linetype = "dashed",
label = "99% VaR") +
geom_hline(yintercept = var_995,
color = "black",
linetype = "dashed",
label = "99.5% VaR") +
labs(title = "TSLA极端损失与EVT-GPD VaR",x = "日期", y = "极端损失（绝对值）") +
theme_minimal()
# 定义VaR计算函数（GPD）
calc_evt_var <- function(conf_level, u, xi, sigma, N, Nu) {
alpha <- 1 - conf_level
term <- (N / Nu * alpha)^(-xi)
var <- u + (sigma / xi) * (term - 1)
return(var)
}
# 计算99%和99.5%置信水平的VaR
var_99 <- calc_evt_var(0.99, u, xi, sigma, N, Nu)
var_995 <- calc_evt_var(0.995, u, xi, sigma, N, Nu)
cat("99% VaR（EVT-GPD）：", round(var_99, 4), "\n")
cat("99.5% VaR（EVT-GPD）：", round(var_995, 4), "\n")
# 回测：极端损失超过VaR的比例
extreme_loss <- as.numeric(loss)[loss > u]  # 极端损失序列
fail_99 <- mean(extreme_loss > var_99)
cat("99% VaR失败率：", round(fail_99 \* 100, 2), "%\n")
# 定义VaR计算函数（GPD）
calc_evt_var <- function(conf_level, u, xi, sigma, N, Nu) {
alpha <- 1 - conf_level
term <- (N / Nu * alpha)^(-xi)
var <- u + (sigma / xi) * (term - 1)
return(var)
}
# 计算99%和99.5%置信水平的VaR
var_99 <- calc_evt_var(0.99, u, xi, sigma, N, Nu)
var_995 <- calc_evt_var(0.995, u, xi, sigma, N, Nu)
cat("99% VaR（EVT-GPD）：", round(var_99, 4), "\n")
cat("99.5% VaR（EVT-GPD）：", round(var_995, 4), "\n")
# 回测：极端损失超过VaR的比例
extreme_loss <- as.numeric(loss)[loss > u]  # 极端损失序列
fail_99 <- mean(extreme_loss > var_99)
cat("99% VaR失败率：", round(fail_99 * 100, 2), "%\n")
# 可视化极端损失与VaR
extreme_df <- data.frame(
Date = index(loss)\[loss > u],
Extreme_Loss = as.numeric(extreme_loss)
)
ggplot(extreme_df, aes(x = Date, y = Extreme_Loss)) +
geom_point(color = "red") +
geom_hline(yintercept = var_99,
color = "blue",
linetype = "dashed",
label = "99% VaR") +
geom_hline(yintercept = var_995,
color = "black",
linetype = "dashed",
label = "99.5% VaR") +
labs(title = "TSLA极端损失与EVT-GPD VaR",x = "日期", y = "极端损失（绝对值）") +
theme_minimal()
# 可视化极端损失与VaR
extreme_df <- data.frame(
Date = index(loss)[loss > u],
Extreme_Loss = as.numeric(extreme_loss)
)
ggplot(extreme_df, aes(x = Date, y = Extreme_Loss)) +
geom_point(color = "red") +
geom_hline(yintercept = var_99,
color = "blue",
linetype = "dashed",
label = "99% VaR") +
geom_hline(yintercept = var_995,
color = "black",
linetype = "dashed",
label = "99.5% VaR") +
labs(title = "TSLA极端损失与EVT-GPD VaR",x = "日期", y = "极端损失（绝对值）") +
theme_minimal()
# 可视化极端损失与VaR
extreme_df <- data.frame(
Date = index(loss)[loss > u],
Extreme_Loss = as.numeric(extreme_loss)
)
ggplot(extreme_df, aes(x = Date, y = Extreme_Loss)) +
geom_point(color = "red") +
geom_hline(yintercept = var_99,
color = "blue",
linetype = "dashed") +
geom_hline(yintercept = var_995,
color = "black",
linetype = "dashed") +
labs(title = "TSLA极端损失与EVT-GPD VaR",x = "日期", y = "极端损失（绝对值）") +
theme_minimal()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
