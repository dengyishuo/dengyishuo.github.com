arguments = list(sigcol="RSI.lt.30",
sigval=TRUE,
orderqty= 1000,
ordertype='market',
orderside='long',
pricemethod='market',
replace=FALSE,
osFUN=osMaxPos),
type='enter',
path.dep=TRUE)
# 第二条规则：当RSI下穿阈值时买入
stratRSI <- add.rule(strategy = stratRSI,
name='ruleSignal',
arguments = list(sigcol="RSI.lt.30",
sigval=TRUE,
orderqty= 1000,
ordertype='market',
orderside='long',
pricemethod='market',
replace=FALSE,
osFUN=osMaxPos),
type='enter',
path.dep=TRUE)
stratRSI <- add.rule(strategy = stratRSI,
name='ruleSignal',
arguments = list(sigcol="RSI.gt.70",
sigval=TRUE,
orderqty='all',
ordertype='market',
orderside='long',
pricemethod='market',
replace=FALSE),
type='exit',
path.dep=TRUE)
# 第一条规则：当RSI上穿阈值时卖出
stratRSI <- add.rule(strategy = stratRSI,
name='ruleSignal',
arguments = list(sigcol="RSI.gt.70",
sigval=TRUE,
orderqty=-1000,
ordertype='market',
orderside='short',
pricemethod='market',
replace=FALSE,
osFUN=osMaxPos),
type='enter',
path.dep=TRUE)
stratRSI <- add.rule(strategy = stratRSI,
name='ruleSignal',
arguments = list(sigcol="RSI.lt.30",
sigval=TRUE,
orderqty='all',
ordertype='market',
orderside='short',
pricemethod='market',
replace=FALSE),
type='exit',
path.dep=TRUE)
require(quantstrat)
# 清理历史策略数据（避免残留数据干扰）
suppressWarnings(rm("order_book.RSI",pos=.strategy))
suppressWarnings(rm("account.RSI","portfolio.RSI",pos=.blotter))
suppressWarnings(rm("account.st",
"portfolio.st",
"stock.str",
"stratRSI",
"initDate",
"initEq",
'start_t',
'end_t'
)
# 创建策略容器
stratRSI <- strategy("RSI")
n=2  # 参数示例
# 2.1 添加技术指标
# 使用经典RSI指标（默认周期14）
stratRSI <- add.indicator(
strategy = stratRSI,
name = "RSI",    # 内置RSI函数
arguments = list(price = quote(getPrice(mktdata))), # 获取价格数据
label = "RSI"
)
# 2.2 定义交易信号
# 信号1：RSI上穿70（超买信号）
stratRSI <- add.signal(
strategy = stratRSI,
name = "sigThreshold",
arguments = list(
threshold = 70,
column = "RSI",
relationship = "gt",  # greater than
cross = TRUE          # 要求穿越阈值
),
label = "RSI.gt.70"
)
# 信号2：RSI下穿30（超卖信号）
stratRSI <- add.signal(
strategy = stratRSI,
name = "sigThreshold",
arguments = list(
threshold = 30,
column = "RSI",
relationship = "lt",  # less than
cross = TRUE
),
label = "RSI.lt.30"
)
# 2.3 设置交易规则
# 规则组1：做空规则
# 入场规则：RSI>70时建立空头仓位
stratRSI <- add.rule(
strategy = stratRSI,
name = 'ruleSignal',
arguments = list(
sigcol = "RSI.gt.70",   # 触发信号列
sigval = TRUE,          # 信号有效值
orderqty = -1000,       # 卖出数量
ordertype = 'market',   # 市价单
orderside = 'short',    # 空头方向
pricemethod = 'market',
replace = FALSE,        # 不替换现有订单
osFUN = osMaxPos        # 使用最大仓位函数
),
type = 'enter',           # 入场规则
path.dep = TRUE           # 路径依赖
)
# 离场规则：RSI<30时平空仓
stratRSI <- add.rule(
strategy = stratRSI,
name = 'ruleSignal',
arguments = list(
sigcol = "RSI.lt.30",
sigval = TRUE,
orderqty = 'all',       # 平掉全部仓位
ordertype = 'market',
orderside = 'short',
pricemethod = 'market',
replace = FALSE
),
type = 'exit',
path.dep = TRUE
)
# 规则组2：做多规则
# 入场规则：RSI<30时建立多头仓位
stratRSI <- add.rule(
strategy = stratRSI,
name = 'ruleSignal',
arguments = list(
sigcol = "RSI.lt.30",
sigval = TRUE,
orderqty = 1000,        # 买入数量
ordertype = 'market',
orderside = 'long',     # 多头方向
pricemethod = 'market',
replace = FALSE,
osFUN = osMaxPos
),
type = 'enter',
path.dep = TRUE
)
# 离场规则：RSI>70时平多仓
stratRSI <- add.rule(
strategy = stratRSI,
name = 'ruleSignal',
arguments = list(
sigcol = "RSI.gt.70",
sigval = TRUE,
orderqty = 'all',
ordertype = 'market',
orderside = 'long',
pricemethod = 'market',
replace = FALSE
),
type = 'exit',
path.dep = TRUE
)
# ---------------------------
# 3. 市场数据准备
# ---------------------------
# 设置基础货币
currency("USD")
currency("EUR")
# 定义交易标的（美国行业ETF）
symbols = c("XLF", "XLP", "XLE", "XLY", "XLV", "XLI", "XLB", "XLK", "XLU")
# 初始化交易品种数据
for(symbol in symbols){
# 注册金融工具
stock(symbol, currency="USD",multiplier=1)
# 下载历史数据（默认从Yahoo Finance）
getSymbols(symbol)
}
# ---------------------------
# 4. 回测系统初始化
# ---------------------------
# 设置回测参数
initDate = '2000-01-01'  # 初始化日期
initEq = 100000          # 初始资金（美元）
port.st = 'RSI'          # 组合名称
# 初始化投资组合
initPortf(port.st,
symbols=symbols,
initDate=initDate)
# 初始化账户
initAcct(port.st,
portfolios=port.st,
initDate=initDate,
initEq=initEq)
# 初始化订单簿
initOrders(portfolio=port.st,
initDate=initDate)
# 设置仓位限制（每个品种最大300股，最多3个品种）
for(symbol in symbols){
addPosLimit(port.st,
symbol,
initDate,
300,
3 )
}
print("初始化完成")
# ---------------------------
# 5. 策略回测执行
# ---------------------------
# 执行策略应用
start_t<-Sys.time()
out<-try(
applyStrategy(strategy=stratRSI ,
portfolios=port.st,
parameters=list(n=2) # 可传入策略参数
)
end_t<-Sys.time()
print("策略循环耗时:")
print(end_t-start_t)
print("策略循环耗时:",end_t-start_t)
print(paste0("策略循环耗时:",end_t-start_t))
start_t<-Sys.time()
# 更新组合净值
updatePortf(Portfolio=port.st,Dates=paste('::',as.Date(Sys.time()),sep=''))
end_t<-Sys.time()
print(paste0("更新交易账簿耗时:",end_t-start_t))
# 临时修改quantmod图形参数
themelist<-chart_theme()
themelist$col$up.col<-'lightgreen'
themelist$col$dn.col<-'pink'
for(symbol in symbols){
# dev.new()
chart.Posn(Portfolio=port.st,Symbol=symbol,theme=themelist)  # 绘制持仓图
plot(add_RSI(n=2))
print(paste0(symbol,"仓位图"))
}
# 统计组合表现
ret1 <- PortfReturns(port.st)
ret1$total <- rowSums(ret1)
if("package:PerformanceAnalytics" %in% search() || require("PerformanceAnalytics",quietly=TRUE)) {
dev.new()
# 绘制收益率图
charts.PerformanceSummary(ret1$total,geometric=FALSE,wealth.index=TRUE)
print("策略总体表现")
}
# 查看交易单据
book  = getOrderBook(port.st)
# 查看交易统计
stats = tradeStats(port.st)
# 查看组合收益率
rets  = PortfReturns(port.st)
blogdown:::serve_site()
blogdown
blogdown::stop_server()
blogdown
blogdown:::serve_site()
stats
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
library(quantstrat)
?quantstrat
blogdown:::new_post_addin()
# Load Packages:
require(iterators)
require(quantstrat)
require(gamlss.util)  # depends on gamlss
install.packages("iterators")
require(gamlss.util)
install.packages("gamlss.util")
install.packages("Matrix")
install.packages("gamlss")
install.packages("gamlss.util")
devtools::install_github("https://github.com/cran/gamlss.util")
# Load Packages:
require(iterators)
require(quantstrat)
require(gamlss.util)  # depends on gamlss
require(devtools)
install_github('ramnathv/rCharts')
# 基于简单移动平均线的信号评估策略
###############################################################)############
# 加载包：
require(iterators)      # 迭代器工具
require(quantstrat)     # 量化策略回测框架
require(gamlss.util)    # 统计工具包（用于数据分布分析）
require(reshape2)
require(rCharts)
require(beanplot)
###########################################################################
# 配置时区设置
ttz<-Sys.getenv('TZ')   # 保存当前时区
Sys.setenv(TZ='UTC')    # 设置回测时区为UTC（避免时区问题影响）
# 清理残留数据
suppressWarnings(rm("order_book.macross",pos=.strategy))
suppressWarnings(rm("account.macross","portfolio.macross",pos=.blotter))
suppressWarnings(rm("account.st","portfolio.st","stock.str","strategy.st",'start_t','end_t'))
###########################################################################
# 数据准备
startDate="2000-01-01"                         # 回测起始日期
stock.str=c('XLY','XLF','XLP','XLI','RTH','XLV','XLK','XLE','IYT') # 股票代码列表
currency('USD')                                # 设置基准货币为美元
stock(stock.str, currency='USD', multiplier=1) # 定义交易品种属性
# 下载雅虎财经数据
getSymbols(stock.str, from=startDate, src = 'yahoo')
for (symbol in stock.str) {
# 检查对象是否存在
if (exists(symbol)) {
# 生成文件名
file_name <- paste0(symbol, ".rds")
# 保存为RDS文件
saveRDS(get(symbol), file = file_name)
# 打印保存信息
message("已保存: ", symbol, " -> ", file_name)
} else {
warning("对象 ", symbol, " 不存在")
}
# 调整所有股票数据为复权价格
for(i in stock.str)
assign(i, adjustOHLC(get(i), use.Adjusted=TRUE))
###########################################################################
# 初始化账户、组合、策略
initEq=1000000                          # 初始资金100万美元
portfolio.st='macross'                  # 组合名称
account.st='macross'                    # 账户名称
# 初始化组合、账户、订单簿
initPortf(portfolio.st,
symbols=stock.str)
initAcct(account.st,
portfolios=portfolio.st,
initEq=initEq)
initOrders(portfolio=portfolio.st)
# 创建策略对象
strategy.st<- strategy(portfolio.st)
# 添加技术指标
# 添加50日SMA指标
strategy.st <- add.indicator(strategy = strategy.st,
name = "SMA",
arguments = list(x=quote(Cl(mktdata)),
n=50),
label= "ma50" )
# 添加200日SMA指标
strategy.st <- add.indicator(strategy = strategy.st,
name = "SMA",
arguments = list(x=quote(Cl(mktdata)),
n=200),
label= "ma200")
# 添加信号规则
# 当50日均线上穿200日均线时生成信号
strategy.st <- add.signal(strategy = strategy.st,
name="sigCrossover",
arguments = list(columns=c("ma50","ma200"),
relationship="gte"),
label="ma50.gt.ma200")
# 当50日均线下穿200日均线时生成信号
strategy.st <- add.signal(strategy = strategy.st,
name="sigCrossover",
arguments =list(columns=c("ma50","ma200"),
relationship="lt"),
label="ma50.lt.ma200")
###########################################################################
# 参数优化设置
# 需要分析的信号列标签
signal.label = 'ma50.gt.ma200'
# # 定义参数范围
.FastSMA = seq(1,5,1)    # 快速SMA参数范围：1-5日
.SlowSMA = seq(5,20,5)   # 慢速SMA参数范围：5-20日（步长5）
# 添加快速SMA参数分布
strategy.st<-add.distribution(strategy.st,
paramset.label = 'SMA',
component.type = 'indicator',
component.label = 'ma50',
variable = list(n = .FastSMA),
label = 'nFAST')
# 添加慢速SMA参数分布
strategy.st<-add.distribution(strategy.st,
paramset.label = 'SMA',
component.type = 'indicator',
component.label = 'ma200',
variable = list(n = .SlowSMA),
label = 'nSLOW')
# 添加参数约束：快速SMA周期必须小于慢速SMA
strategy.st<-add.distribution.constraint(strategy.st,
paramset.label = 'SMA',
distribution.label.1 = 'nFAST',
distribution.label.2 = 'nSLOW',
operator = '<',
label = 'SMA')
# # 执行信号分析（日线级别）
results = apply.paramset.signal.analysis(
strategy.st,
paramset.label = 'SMA',
portfolio.st,
sigcol = signal.label,    # 分析的信号列
sigval = 1,               # 信号触发阈值
on = NULL,                # 分析频率（NULL表示原始数据频率）
forward.days = 50,        # 信号后观察50天
cum.sum = TRUE,           # 计算累积收益
include.day.of.signal = F,# 排除信号当天
obj.fun = signal.obj.slope, # 使用斜率作为目标函数
decreasing = T            # 按降序排序结果
)
#------------------------------- 日线级别分析结果 ------------------------------#
# 绘制IYT标的参数组合(5,20)的收益分布箱线图
# signal: 信号分析结果数据集
# x.val: x轴刻度位置，seq(1,50,5)表示从1到50步长5
# val: 每个盒须图对应的时间窗口长度
# ylim/xlim: 坐标轴范围
# mai: 图形边距参数
print(
distributional.boxplot(
signal=results$sigret.by.asset$IYT$paramset.5.20,
x.val=seq(1, 50, 5),  # 显示1-50天，每5天一个刻度
val=10,               # 每个盒须图代表10天的收益窗口
ylim=c(-20, 20),      # Y轴收益范围限制在±20%
xlim=c(0, 50),        # X轴范围0-50天
mai=c(1,1,0.3,0.5),   # 图形边距设置（下左上右）
h=0                   # 水平参考线位置（0轴）
)
# 绘制XLE标的信号的参数组合面板图（5行4列布局）
print(
signal.plot(
results$sigret.by.asset$XLE,
rows=5,      # 图形行数
columns = 4  # 图形列数
)
# 绘制XLE标的的豆状分布图（展示参数组合的密度分布）
print(
beanplot.signals(
results$sigret.by.asset$XLE,
rows=5,     # 图形行数
columns = 4# 图形列数
)
# 绘制IYT标的参数组合(5,20)的信号路径图
print(
signal.path.plot(results$sigret.by.asset$IYT$paramset.5.20)
)
#----------------------------- 周线级别前瞻分析 -----------------------------#
# 执行周线级别信号分析（向前看10天）
results.w = apply.paramset.signal.analysis(
strategy.st,           # 策略对象
paramset.label='SMA',  # 参数集标签
portfolio.st,          # 组合名称
sigcol = signal.label, # 信号列名称
sigval = 1,            # 信号触发值
on='weeks',            # 按周汇总结果
forward.days=10,       # 信号后观察10天
cum.sum=TRUE,          # 计算累积收益
include.day.of.signal=F, # 排除信号当天
obj.fun=signal.obj.slope, # 使用斜率评估
decreasing=T           # 降序排列结果
)
# 绘制周线分析箱线图（时间窗口调整为10天）
distributional.boxplot(signal=results.w$sigret.by.asset$IYT$paramset.5.20,
x.val=seq(1, 10, 2), # 1-10天步长2
val=10,
ylim=c(-20, 20),
xlim=c(0, 10),
mai=c(1,1,0.3,0.5),
h=0)
# 绘制周线信号分析可视化面板
signal.plot(results.w$sigret.by.asset$XLE, rows=5, columns = 4)
# 绘制周线豆状分布图
beanplot.signals(results.w$sigret.by.asset$XLE, rows=5, columns = 4)
#----------------------------- 月线级别前瞻分析 -----------------------------#
# 执行月线级别信号分析（向前看5天）
results.m = apply.paramset.signal.analysis(
strategy.st,
paramset.label='SMA',
portfolio.st,
sigcol = signal.label,
sigval = 1,
on='months',           # 按月汇总结果
forward.days=5,        # 信号后观察5天（模拟月度调仓）
cum.sum=TRUE,
include.day.of.signal=F,
obj.fun=signal.obj.slope,
decreasing=T
)
# 绘制月线分析箱线图（时间窗口调整为5天）
distributional.boxplot(signal=results.m$sigret.by.asset$IYT$paramset.5.20,
x.val=seq(1, 5, 1),  # 1-5天逐日显示
val=10,
ylim=c(-30, 30),    # 放宽收益范围
xlim=c(0, 5),
mai=c(1,1,0.3,0.5),
h=0)
# 绘制月线信号面板图
signal.plot(results.m$sigret.by.asset$XLE, rows=5, columns = 4)
# 绘制月线豆状分布图
beanplot.signals(results.m$sigret.by.asset$XLE, rows=5, columns = 4)
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
