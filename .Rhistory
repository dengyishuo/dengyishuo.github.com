theme_minimal()
print(p3)
# 输出关键参数
cat("LPPL模型参数估计结果:\n")
print(best_params)
cat("\n预测的临界时间点:", as.Date(dates[1]) + best_params["tc"], "\n")
# 加载必要的包
library(quantmod)
library(DEoptim)
library(ggplot2)
library(reshape2)
# 获取纳斯达克指数数据
getSymbols("^IXIC", from = "2010-01-01", to = Sys.Date())
nasdaq <- IXIC$IXIC.Close
names(nasdaq) <- "Close"
# 数据预处理
prices <- as.numeric(nasdaq)
dates <- index(nasdaq)
t <- seq_along(prices)
# LPPL模型函数（优化数值稳定性）
lppl <- function(t, tc, beta, omega, phi, A, B, C) {
safe_diff <- pmax(tc - t, 1e-10)
power_term <- safe_diff^beta
cos_term <- cos(omega * log(safe_diff) + phi)
result <- A + B * power_term + C * power_term * cos_term
result <- pmax(pmin(result, 20), -20)
return(result)
}
# 残差平方和函数
lppl_sse <- function(params, t, y) {
tc <- params[1]
beta <- params[2]
omega <- params[3]
phi <- params[4]
A <- params[5]
B <- params[6]
C <- params[7]
if (tc <= max(t) + 1 || beta <= 0 || beta >= 1 || omega <= 0 || A < 0) {
return(1e10)
}
y_pred <- lppl(t, tc, beta, omega, phi, A, B, C)
sum((log(y) - y_pred)^2)
}
# 定义参数优化边界
lower <- c(max(t) + 5, 0.1, 2 * pi, 0, min(log(prices)), -100, -100)
upper <- c(max(t) + 365, 0.9, 10 * pi, 2 * pi, max(log(prices)), 100, 100)
# 差分进化算法优化
set.seed(123)
result <- DEoptim(lppl_sse, lower, upper,
control = list(itermax = 200, NP = 100, strategy = 2, trace = TRUE),
t = t, y = prices)
best_params <- result$optim$bestmem
names(best_params) <- c("tc", "beta", "omega", "phi", "A", "B", "C")
# 计算拟合值
fitted_values <- lppl(t, best_params["tc"], best_params["beta"],
best_params["omega"], best_params["phi"],
best_params["A"], best_params["B"], best_params["C"])
predicted_prices <- exp(fitted_values)
# 预测未来120天（修正行数不一致问题）
future_t <- seq(max(t), max(t) + 119)  # 改为119确保总天数120
future_fitted <- sapply(future_t, function(x) {
if (x >= best_params["tc"] - 1e-5) {
best_params["A"]
} else {
lppl(x, best_params["tc"], best_params["beta"],
best_params["omega"], best_params["phi"],
best_params["A"], best_params["B"], best_params["C"])
}
})
future_prices <- exp(future_fitted)
future_dates <- seq(max(dates), by = "day", length.out = 120)
# 可视化结果（确保数据长度一致）
plot_data <- data.frame(
Date = c(dates, future_dates),
Price = c(prices, future_prices),
Type = c(rep("Actual", length(prices)), rep("Predicted", length(future_prices)))
)
p1 <- ggplot(plot_data, aes(x = Date, y = Price, color = Type)) +
geom_line() +
geom_vline(xintercept = as.Date(dates[1]) + best_params["tc"], linetype = "dashed") +
labs(title = "纳斯达克指数LPPL模型拟合与预测",
y = "指数值",
x = "日期") +
scale_color_manual(values = c("Actual" = "blue", "Predicted" = "red")) +
theme_minimal()
# 分析对数周期振荡
oscillations <- best_params["C"] * (best_params["tc"] - t)^best_params["beta"] *
cos(best_params["omega"] * log(best_params["tc"] - t) + best_params["phi"])
# 可视化振荡部分
osc_data <- data.frame(
Date = dates,
Oscillation = oscillations
)
p2 <- ggplot(osc_data, aes(x = Date, y = Oscillation)) +
geom_line(color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
labs(title = "LPPL模型中的对数周期振荡",
y = "振荡幅度",
x = "日期") +
theme_minimal()
print(p2)
# 预测未来价格走势（增加稳定性检查）
future_t <- seq(max(t), max(t) + 120, by = 1)  # 预测未来120天
future_fitted <- numeric(length(future_t))
for(i in seq_along(future_t)) {
if(future_t[i] >= best_params["tc"] - 1) {
future_fitted[i] <- fitted_values[length(fitted_values)]
} else {
future_fitted[i] <- lppl(future_t[i], best_params["tc"], best_params["beta"],
best_params["omega"], best_params["phi"],
best_params["A"], best_params["B"], best_params["C"])
}
future_prices <- exp(future_fitted)
future_prices <- ifelse(is.finite(future_prices), future_prices, NA)
future_dates <- seq(max(dates), by = "day", length.out = length(future_t))
# 合并历史与预测数据
prediction_data <- data.frame(
Date = c(as.Date(dates), future_dates),
Price = c(prices, future_prices),
Type = c(rep("历史", length(prices)), rep("预测", length(future_prices)))
)
# 可视化预测结果
p3 <- ggplot(prediction_data, aes(x = Date, y = Price, color = Type)) +
geom_line() +
geom_vline(xintercept = as.numeric(max(dates)), linetype = "dashed", color = "gray") +
labs(title = "纳斯达克指数LPPL模型预测",
y = "指数值",
x = "日期") +
scale_color_manual(values = c("历史" = "black", "预测" = "red")) +
theme_minimal()
print(p3)
# 输出关键参数
cat("LPPL模型参数估计结果:\n")
print(best_params)
cat("\n预测的临界时间点:", as.Date(dates[1]) + best_params["tc"], "\n")
blogdown:::serve_site()
dates[1]
best_params["tc"]
# 加载必要的包
library(quantmod)
library(DEoptim)
library(ggplot2)
library(reshape2)
# 获取纳斯达克指数数据
getSymbols("^IXIC", from = "2010-01-01", to = Sys.Date())
nasdaq <- IXIC$IXIC.Close
names(nasdaq) <- "Close"
# 增强版LPPL模型函数：增加数值稳定性处理
lppl <- function(t, tc, beta, omega, phi, A, B, C) {
# 防止t接近或超过tc时的数值问题
epsilon <- 1e-6
safe_t <- pmin(t, tc - epsilon)
# 基础LPPL公式
power_term <- (tc - safe_t)^beta
cos_term <- cos(omega * log(tc - safe_t) + phi)
# 防止极端值导致的计算溢出
result <- A + B * power_term + C * power_term * cos_term
result <- pmax(result, -1e10)  # 限制最小值
result <- pmin(result, 1e10)   # 限制最大值
return(result)
}
# 残差平方和函数（用于优化）
lppl_sse <- function(params, t, y) {
tc <- params[1]
beta <- params[2]
omega <- params[3]
phi <- params[4]
A <- params[5]
B <- params[6]
C <- params[7]
# 更严格的参数约束
if (tc <= max(t) + 5 || beta <= 0.1 || beta >= 0.8 || omega <= 3 || omega >= 15 || A <= 0) {
return(1e10)  # 不合理参数返回大值
}
y_pred <- lppl(t, tc, beta, omega, phi, A, B, C)
# 计算加权SSE，对近期数据赋予更高权重
weights <- seq_along(t) / max(t)
sum(weights * (log(y) - y_pred)^2)
}
# 数据预处理
prices <- coredata(nasdaq)
dates <- index(nasdaq)
t <- 1:length(prices)  # 转换为时间索引
# 定义更合理的参数优化边界
lower <- c(max(t) + 30, 0.15, 3, 0, min(prices)*0.8, -50, -50)
upper <- c(max(t) + 365, 0.75, 15, 2*pi, max(prices)*1.2, 50, 50)
# 优化前的价格对数变换
log_prices <- log(prices)
# 使用差分进化算法进行参数优化，增加稳定性
set.seed(123)
result <- DEoptim(lppl_sse, lower, upper,
control = list(
itermax = 300,
NP = 150,
F = 0.6,       # 降低缩放因子提高稳定性
CR = 0.9,      # 较高的交叉概率
strategy = 2,
trace = TRUE,
steptol = 20,  # 增加收敛容忍度
reltol = 1e-6  # 相对容差
),
t = t, y = prices)
# 获取最优参数
best_params <- result$optim$bestmem
names(best_params) <- c("tc", "beta", "omega", "phi", "A", "B", "C")
# 计算拟合值（使用对数空间）
fitted_values <- lppl(t, best_params["tc"], best_params["beta"],
best_params["omega"], best_params["phi"],
best_params["A"], best_params["B"], best_params["C"])
# 将拟合值转换回价格空间，并处理异常值
predicted_prices <- exp(fitted_values)
predicted_prices <- ifelse(is.finite(predicted_prices), predicted_prices, NA)
# 可视化结果
plot_data <- data.frame(
Date = dates,
Actual = prices,
Fitted = predicted_prices
)
colnames(plot_data) <- c("Date", "Actual", "Fitted")
# 绘制拟合图
p1 <- ggplot(plot_data, aes(x = Date)) +
geom_line(aes(y = Actual, color = "实际价格")) +
geom_line(aes(y = Fitted, color = "LPPL拟合")) +
labs(title = "纳斯达克指数LPPL模型拟合",
y = "指数值",
x = "日期") +
scale_color_manual(values = c("实际价格" = "black", "LPPL拟合" = "red")) +
theme_minimal()
print(p1)
cat("\n预测的临界时间点:", as.Date(dates[1] + round(best_params["tc"],1)), "\n")
blogdown:::stop_server()
as.Date(dates[1] + round(best_params["tc"],1))
best_params["tc"]
round(best_params["tc"],1)
round(best_params["tc"])
dates[1] + round(best_params["tc"])
p3
?plotly
plotly(p3)
library(plotly)
plotly(p3)
# 加载必要的包
library(quantmod)
library(DEoptim)
library(ggplot2)
library(reshape2)
# 获取纳斯达克指数数据
getSymbols("^IXIC", from = "2020-01-01", to = Sys.Date())
nasdaq <- IXIC$IXIC.Close
names(nasdaq) <- "Close"
# 数据预处理
prices <- as.numeric(nasdaq)
dates <- index(nasdaq)
t <- seq_along(prices)
# LPPL模型函数（优化数值稳定性）
lppl <- function(t, tc, beta, omega, phi, A, B, C) {
safe_diff <- pmax(tc - t, 1e-10)
power_term <- safe_diff^beta
cos_term <- cos(omega * log(safe_diff) + phi)
result <- A + B * power_term + C * power_term * cos_term
result <- pmax(pmin(result, 20), -20)
return(result)
}
# 残差平方和函数
lppl_sse <- function(params, t, y) {
tc <- params[1]
beta <- params[2]
omega <- params[3]
phi <- params[4]
A <- params[5]
B <- params[6]
C <- params[7]
if (tc <= max(t) + 1 || beta <= 0 || beta >= 1 || omega <= 0 || A < 0) {
return(1e10)
}
y_pred <- lppl(t, tc, beta, omega, phi, A, B, C)
sum((log(y) - y_pred)^2)
}
# 定义参数优化边界
lower <- c(max(t) + 5, 0.1, 2 * pi, 0, min(log(prices)), -100, -100)
upper <- c(max(t) + 365, 0.9, 10 * pi, 2 * pi, max(log(prices)), 100, 100)
# 差分进化算法优化
set.seed(123)
result <- DEoptim(lppl_sse, lower, upper,
control = list(itermax = 200, NP = 100, strategy = 2, trace = TRUE),
t = t, y = prices)
best_params <- result$optim$bestmem
names(best_params) <- c("tc", "beta", "omega", "phi", "A", "B", "C")
# 计算拟合值
fitted_values <- lppl(t, best_params["tc"], best_params["beta"],
best_params["omega"], best_params["phi"],
best_params["A"], best_params["B"], best_params["C"])
predicted_prices <- exp(fitted_values)
# 预测未来120天（修正行数不一致问题）
future_t <- seq(max(t), max(t) + 119)  # 改为119确保总天数120
future_fitted <- sapply(future_t, function(x) {
if (x >= best_params["tc"] - 1e-5) {
best_params["A"]
} else {
lppl(x, best_params["tc"], best_params["beta"],
best_params["omega"], best_params["phi"],
best_params["A"], best_params["B"], best_params["C"])
}
})
future_prices <- exp(future_fitted)
future_dates <- seq(max(dates), by = "day", length.out = 120)
# 可视化结果（确保数据长度一致）
plot_data <- data.frame(
Date = c(dates, future_dates),
Price = c(prices, future_prices),
Type = c(rep("Actual", length(prices)), rep("Predicted", length(future_prices)))
)
p1 <- ggplot(plot_data, aes(x = Date, y = Price, color = Type)) +
geom_line() +
geom_vline(xintercept = as.Date(dates[1]) + best_params["tc"], linetype = "dashed") +
labs(title = "纳斯达克指数LPPL模型拟合与预测",
y = "指数值",
x = "日期") +
scale_color_manual(values = c("Actual" = "blue", "Predicted" = "red")) +
theme_minimal()
# 分析对数周期振荡
oscillations <- best_params["C"] * (best_params["tc"] - t)^best_params["beta"] *
cos(best_params["omega"] * log(best_params["tc"] - t) + best_params["phi"])
# 可视化振荡部分
osc_data <- data.frame(
Date = dates,
Oscillation = oscillations
)
p2 <- ggplot(osc_data, aes(x = Date, y = Oscillation)) +
geom_line(color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
labs(title = "LPPL模型中的对数周期振荡",
y = "振荡幅度",
x = "日期") +
theme_minimal()
# 预测未来价格走势（增加稳定性检查）
future_t <- seq(max(t), max(t) + 120, by = 1)  # 预测未来120天
future_fitted <- numeric(length(future_t))
for(i in seq_along(future_t)) {
if(future_t[i] >= best_params["tc"] - 1) {
future_fitted[i] <- fitted_values[length(fitted_values)]
} else {
future_fitted[i] <- lppl(future_t[i], best_params["tc"], best_params["beta"],
best_params["omega"], best_params["phi"],
best_params["A"], best_params["B"], best_params["C"])
}
future_prices <- exp(future_fitted)
future_prices <- ifelse(is.finite(future_prices), future_prices, NA)
future_dates <- seq(max(dates), by = "day", length.out = length(future_t))
# 合并历史与预测数据
prediction_data <- data.frame(
Date = c(as.Date(dates), future_dates),
Price = c(prices, future_prices),
Type = c(rep("历史", length(prices)), rep("预测", length(future_prices)))
)
# 可视化预测结果
p3 <- ggplot(prediction_data, aes(x = Date, y = Price, color = Type)) +
geom_line() +
geom_vline(xintercept = as.numeric(max(dates)), linetype = "dashed", color = "gray") +
labs(title = "纳斯达克指数LPPL模型预测",
y = "指数值",
x = "日期") +
scale_color_manual(values = c("历史" = "black", "预测" = "red")) +
theme_minimal()
print(p1)
print(p2)
print(p3)
# 输出关键参数
cat("LPPL模型参数估计结果:\n")
print(best_params)
cat("\n预测的临界时间点:", as.Date(dates[1] + round(best_params["tc"])), "\n")
as.Date(dates[1] + round(best_params["tc"]))
cat("\n预测的临界时间点:", as.character(as.Date(dates[1] + round(best_params["tc"]))), "\n")
p3
# 加载必要的包
library(quantmod)
library(DEoptim)
library(ggplot2)
library(reshape2)
# 获取纳斯达克指数数据
getSymbols("^IXIC", from = "2024-01-01", to = Sys.Date())
nasdaq <- IXIC$IXIC.Close
names(nasdaq) <- "Close"
# 数据预处理
prices <- as.numeric(nasdaq)
dates <- index(nasdaq)
t <- seq_along(prices)
# LPPL模型函数（优化数值稳定性）
lppl <- function(t, tc, beta, omega, phi, A, B, C) {
safe_diff <- pmax(tc - t, 1e-10)
power_term <- safe_diff^beta
cos_term <- cos(omega * log(safe_diff) + phi)
result <- A + B * power_term + C * power_term * cos_term
result <- pmax(pmin(result, 20), -20)
return(result)
}
# 残差平方和函数
lppl_sse <- function(params, t, y) {
tc <- params[1]
beta <- params[2]
omega <- params[3]
phi <- params[4]
A <- params[5]
B <- params[6]
C <- params[7]
if (tc <= max(t) + 1 || beta <= 0 || beta >= 1 || omega <= 0 || A < 0) {
return(1e10)
}
y_pred <- lppl(t, tc, beta, omega, phi, A, B, C)
sum((log(y) - y_pred)^2)
}
# 定义参数优化边界
lower <- c(max(t) + 5, 0.1, 2 * pi, 0, min(log(prices)), -100, -100)
upper <- c(max(t) + 365, 0.9, 10 * pi, 2 * pi, max(log(prices)), 100, 100)
# 差分进化算法优化
set.seed(123)
result <- DEoptim(lppl_sse, lower, upper,
control = list(itermax = 200, NP = 100, strategy = 2, trace = TRUE),
t = t, y = prices)
best_params <- result$optim$bestmem
names(best_params) <- c("tc", "beta", "omega", "phi", "A", "B", "C")
# 计算拟合值
fitted_values <- lppl(t, best_params["tc"], best_params["beta"],
best_params["omega"], best_params["phi"],
best_params["A"], best_params["B"], best_params["C"])
predicted_prices <- exp(fitted_values)
# 预测未来120天（修正行数不一致问题）
future_t <- seq(max(t), max(t) + 119)  # 改为119确保总天数120
future_fitted <- sapply(future_t, function(x) {
if (x >= best_params["tc"] - 1e-5) {
best_params["A"]
} else {
lppl(x, best_params["tc"], best_params["beta"],
best_params["omega"], best_params["phi"],
best_params["A"], best_params["B"], best_params["C"])
}
})
future_prices <- exp(future_fitted)
future_dates <- seq(max(dates), by = "day", length.out = 120)
# 可视化结果（确保数据长度一致）
plot_data <- data.frame(
Date = c(dates, future_dates),
Price = c(prices, future_prices),
Type = c(rep("Actual", length(prices)), rep("Predicted", length(future_prices)))
)
p1 <- ggplot(plot_data, aes(x = Date, y = Price, color = Type)) +
geom_line() +
geom_vline(xintercept = as.Date(dates[1]) + best_params["tc"], linetype = "dashed") +
labs(title = "纳斯达克指数LPPL模型拟合与预测",
y = "指数值",
x = "日期") +
scale_color_manual(values = c("Actual" = "blue", "Predicted" = "red")) +
theme_minimal()
# 分析对数周期振荡
oscillations <- best_params["C"] * (best_params["tc"] - t)^best_params["beta"] *
cos(best_params["omega"] * log(best_params["tc"] - t) + best_params["phi"])
# 可视化振荡部分
osc_data <- data.frame(
Date = dates,
Oscillation = oscillations
)
p2 <- ggplot(osc_data, aes(x = Date, y = Oscillation)) +
geom_line(color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
labs(title = "LPPL模型中的对数周期振荡",
y = "振荡幅度",
x = "日期") +
theme_minimal()
# 预测未来价格走势（增加稳定性检查）
future_t <- seq(max(t), max(t) + 120, by = 1)  # 预测未来120天
future_fitted <- numeric(length(future_t))
for(i in seq_along(future_t)) {
if(future_t[i] >= best_params["tc"] - 1) {
future_fitted[i] <- fitted_values[length(fitted_values)]
} else {
future_fitted[i] <- lppl(future_t[i], best_params["tc"], best_params["beta"],
best_params["omega"], best_params["phi"],
best_params["A"], best_params["B"], best_params["C"])
}
future_prices <- exp(future_fitted)
future_prices <- ifelse(is.finite(future_prices), future_prices, NA)
future_dates <- seq(max(dates), by = "day", length.out = length(future_t))
# 合并历史与预测数据
prediction_data <- data.frame(
Date = c(as.Date(dates), future_dates),
Price = c(prices, future_prices),
Type = c(rep("历史", length(prices)), rep("预测", length(future_prices)))
)
# 可视化预测结果
p3 <- ggplot(prediction_data, aes(x = Date, y = Price, color = Type)) +
geom_line() +
geom_vline(xintercept = as.numeric(max(dates)), linetype = "dashed", color = "gray") +
labs(title = "纳斯达克指数LPPL模型预测",
y = "指数值",
x = "日期") +
scale_color_manual(values = c("历史" = "black", "预测" = "red")) +
theme_minimal()
print(p1)
print(p2)
print(p3)
# 输出关键参数
cat("LPPL模型参数估计结果:\n")
print(best_params)
cat("\n预测的临界时间点:", as.character(as.Date(dates[1] + round(best_params["tc"]))), "\n")
p3
p1
p2
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
blogdown:::stop_server()
blogdown:::serve_site()
